{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"XP Labs: DevOps &amp; Platform Engineering","text":"<p>Welcome to XP Labs!</p> <p>This serves as a hub for tools, processes, and best practices to ensure efficient software delivery, platform reliability, and seamless collaboration.</p>"},{"location":"#mission","title":"\ud83d\ude80 Mission","text":"<p>Empowering teams with scalable, automated infrastructure and operational excellence.</p>"},{"location":"#key-areas","title":"\ud83d\udcd6 Key Areas","text":"<ul> <li>Development Workflow: Streamlined practices for code collaboration and version control.</li> <li>CI/CD Pipelines: Automated pipelines for building, testing, and deploying.</li> <li>Infrastructure as Code (IaC): Reproducible, scalable, and version-controlled infrastructure.</li> <li>Monitoring &amp; Observability: Tools and practices for system health and performance monitoring.</li> <li>Developer Portals: Self-service tools powered by Backstage.</li> <li>Security: Best practices integrated into every development stage.</li> </ul>"},{"location":"#insights-collaboration","title":"\u270d\ufe0f Insights &amp; Collaboration","text":"<ul> <li>Explore blogs, guides, and case studies in the Blogs directory.</li> <li>Contribute by reviewing our Contribution Guidelines.</li> </ul>"},{"location":"#support","title":"\ud83e\udd1d Support","text":"<p>For questions or support: - Reach out via internal communication channels. - Raise an issue in this repository.</p> <p>Let\u2019s build resilient systems together!</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>We\u2019re excited that you\u2019re interested in contributing to XP Labs DevOps &amp; Platform Engineering! Whether it's reporting an issue, improving documentation, or contributing to code, your efforts make this project better for everyone.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to Contribute","text":""},{"location":"CONTRIBUTING/#1-reporting-issues","title":"1. Reporting Issues","text":"<p>If you encounter a bug or have suggestions for improvements:</p> <ul> <li>Check the Issues page to ensure it hasn't already been reported.</li> <li>Open a new issue and include:<ul> <li>A clear, descriptive title.</li> <li>Steps to reproduce (if applicable).</li> <li>Expected vs. actual behavior.</li> <li>Relevant screenshots, logs, or error messages (if possible).</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#2-suggesting-enhancements","title":"2. Suggesting Enhancements","text":"<p>Have an idea to improve the project?</p> <ul> <li>Open a feature request as an issue.</li> <li>Clearly describe the feature, its benefits, and any potential use cases.</li> </ul>"},{"location":"CONTRIBUTING/#3-contributing-code","title":"3. Contributing Code","text":""},{"location":"CONTRIBUTING/#step-1-fork-and-clone","title":"Step 1: Fork and Clone","text":"<ul> <li>Fork the repository to your GitHub account.</li> <li>Clone the forked repository:</li> </ul> <pre><code>git clone https://github.com/surikbs-xp/xp-labs.git\ncd xp-labs\n</code></pre>"},{"location":"CONTRIBUTING/#step-2-create-a-branch","title":"Step 2: Create a Branch","text":"<ul> <li>Use a descriptive branch name that relates to the feature or fix:</li> </ul> <pre><code>git checkout -b feature/my-new-feature\n</code></pre>"},{"location":"CONTRIBUTING/#step-3-make-your-changes","title":"Step 3: Make Your Changes","text":"<ul> <li>Follow the project\u2019s coding standards.</li> <li>Test your changes thoroughly.</li> <li>Ensure your changes don't break existing functionality.</li> </ul>"},{"location":"CONTRIBUTING/#step-4-commit-your-changes","title":"Step 4: Commit Your Changes","text":"<ul> <li>Use meaningful commit messages that describe your changes:</li> </ul> <pre><code>git commit -m \"feat: add support for XYZ\"\n</code></pre>"},{"location":"CONTRIBUTING/#step-5-push-and-open-a-pull-request-pr","title":"Step 5: Push and Open a Pull Request (PR)","text":"<ul> <li>Push your branch to your fork:</li> </ul> <p><pre><code>git push origin feature/my-new-feature\n</code></pre> - Open a PR against the main branch of the original repository. - Provide a detailed description of the changes in your PR.</p>"},{"location":"CONTRIBUTING/#4-writing-documentation","title":"4. Writing Documentation","text":"<p>Help us improve the documentation!</p> <ul> <li>Fix typos or improve clarity in existing documents.</li> <li>Add new sections for missing features or tools.</li> <li>Follow the existing structure and tone for consistency.</li> </ul>"},{"location":"CONTRIBUTING/#5-adding-blog-posts","title":"5. Adding Blog Posts","text":"<p>We encourage technical insights and case studies!</p> <ul> <li>Write your blog post in the blogs/ directory.<ul> <li>Use Markdown for formatting.</li> <li>Add an appropriate title, summary, and tags.</li> </ul> </li> <li>Submit your post as a PR following the process above.</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review and adhere to our Code of Conduct to ensure a welcoming and inclusive environment for everyone.</p>"},{"location":"CONTRIBUTING/#questions","title":"Questions?","text":"<p>If you\u2019re unsure about anything, feel free to:</p> <ul> <li>Comment on an issue or PR. Reach out to the team via our communication channels. Thank you for contributing and making XP Labs DevOps &amp; Platform Engineering better for everyone! \ud83d\ude80</li> </ul>"},{"location":"Staytuned/","title":"test","text":"<p>\ud83d\udea7 This project is currently under construction. Stay tuned for updates! \ud83d\ude80</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/12/28/automization/","title":"Automization","text":""},{"location":"blog/2024/12/28/automization/#evolution-of-operations-from-clickops-to-idp","title":"Evolution of Operations: From ClickOps to IDP","text":"<ul> <li>Level 0: ClickOps</li> <li>Level 1: Scripting</li> <li>Level 2: IaC, CaC</li> <li>Level 3: IaC + Pipelines</li> <li>Level 4: Modules + Charts</li> <li>Level 5: IDP + Portals</li> </ul> <code>Level 0: Clickops</code> ClickOps refers to manually managing cloud infrastructure through a web interface, like AWS Console or Azure Portal. While intuitive for quick tasks or beginners, it is error-prone, hard to replicate, and lacks version control. <code>Level 1: Scripting: Bash, Python or PowerShell</code> This involves using Bash, Python, or PowerShell to automate tasks. It's faster and less error-prone than manual clicks but lacks standardization, scalability, and state tracking. It\u2019s often a stepping stone to more robust automation like IaC. <code>Level 2: Infrastructure as Code and Configuration as Code</code> In my view, the next step beyond scripting is leveraging tools like Terraform for infrastructure provisioning and Ansible for configuration management. <code>Level 3: Pipelines: IaC + CI/CD or Operators with CRDs</code> IaC would be executed through a pipeline instead of locally on the client device, automating the provisioning of the necessary resources. <code>Level 4: Terraform Modules, Helm Charts and GitOps</code> As you professionalize, recurring infrastructure components can be packaged into Terraform modules to provision resources like a Kubernetes cluster. From there, a GitOps approach can be used to deliver infrastructure as code directly to the clusters, achieving a high level of automation. <code>Level 5: Replace Human with Portal</code> The next level would involve replacing the human element at Level 4 with an abstraction layer. However, this doesn't mean platform teams are eliminated; someone still needs to create the Terraform modules, Helm charts, pipelines, and other components, which can then be deployed using a template."},{"location":"blog/2024/12/28/automization/#the-correlation","title":"The Correlation","text":"<code>Level 0\u20131</code> Primarily imperative approaches, with no containerization or orchestration. <code>Level 2\u20133</code> Transition between imperative and declarative, with initial steps toward containerization and API integration. <code>Level 4\u20135</code> Strong focus on declarative approaches, extensive use of containerization, orchestration, and API-driven environments, along with package management."},{"location":"components/kafka/Staytuned/","title":"kafka","text":"<p>\ud83d\udea7 This project is currently under construction. Stay tuned for updates! \ud83d\ude80</p>"},{"location":"components/redpanda/Staytuned/","title":"redpanda","text":"<p>\ud83d\udea7 This project is currently under construction. Stay tuned for updates! \ud83d\ude80</p>"},{"location":"k8s/","title":"Introduction","text":"<p>This Document helps us to create production like kubernetes cluster for learning and testing purposes with the help of Proxmox, Terraform and kubespray.</p>"},{"location":"k8s/#network","title":"Network","text":"<p>Info</p> <p>This approach provides several advantages, such as enhanced security by isolating the cluster from the LAN network and enabling more precise control over network configuration.</p> <p>Note</p> <p>If Proxmox VE isn\u2019t installed yet, you can refer to this page for setup instructions.</p>"},{"location":"k8s/#system-requirement","title":"System Requirement","text":"<p>To begin the deployment on Proxmox VE, we will have to configure the following components</p> <ul> <li>Internal network</li> <li>VM template</li> <li>SSH key pair</li> <li>Bastion host</li> </ul>"},{"location":"k8s/#configuring-internal-network","title":"Configuring Internal Network","text":"<p>It\u2019s important to set up an internal network beforehand. Rather than connecting Kubernetes nodes to the default Proxmox VE bridge, <code>vmbr0</code>, it\u2019s recommended to place them in a dedicated internal network.</p> <ul> <li> <p>Create <code>vmbr1</code> on the pve cluster/node. Open the <code>/etc/network/interfaces</code> file in a text editor and append the below configuration for the new network <code>vmbr1.</code></p> <pre><code># /etc/network/interfaces\n...\n...\n# Dedicated internal network for Kubernetes cluster\nauto vmbr1\niface vmbr1 inet static\n    address  10.0.1.1/24\n    bridge-ports none\n    bridge-stp off\n    bridge-fd 0\n\n    post-up   echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n    post-up   iptables -t nat -A POSTROUTING -s '10.0.1.0/24' -o vmbr0 -j MASQUERADE\n    post-down iptables -t nat -D POSTROUTING -s '10.0.1.0/24' -o vmbr0 -j MASQUERADE\n</code></pre> </li> <li> <p>Reload the config :     <pre><code>ifreload -a\n</code></pre></p> </li> </ul>"},{"location":"k8s/#creating-vm-template","title":"Creating VM Template","text":"<ul> <li> <p>Start a new shell session on your Proxmox VE server and Run the following command to create the VM template:</p> <pre><code> sh create-vm-template.sh\n</code></pre> </li> </ul>"},{"location":"k8s/#generating-ssh-key-pair","title":"Generating SSH key-Pair","text":"<p>User authentication is a critical aspect to address. Instead of using passwords for VM login, we will set up SSH-based authentication. This approach improves network security and removes the hassle of remembering yet another password.</p> <ul> <li>Create a directory to store the key pair.   <pre><code>mkdir -p ~/proxmox-kubernetes/ssh-keys\n</code></pre></li> <li>Generate an SSH key pair and save it to the specified directory.   <pre><code>ssh-keygen -t rsa -b 4096 -f ~/proxmox-kubernetes/ssh-keys/id_rsa -C \"k8s-admin@surikbs.local\"\n</code></pre></li> </ul>"},{"location":"k8s/#setting-up-bastion-host","title":"Setting up Bastion Host","text":"<p>The bastion host is a typical VM connected to both the LAN and internal networks. Here\u2019s a step-by-step guide to provisioning it:</p> <pre><code># Create new vm from the template\nqm clone 9000 9001 --name bastion --full true\n\n# Configure SSH keys for bastion user authentication.\nqm set 9001 --sshkey ~/proxmox-kubernetes/ssh-keys/id_rsa.pub\n\n# Connect the bastion VM to the LAN network by configuring the appropriate IP and gateway settings. Replace 192.168.1.131 with your chosen IP address.\nqm set 9001 --net0 virtio,bridge=vmbr0 --ipconfig0 ip=192.168.1.131/24,gw=192.168.1.1\n\n# Connect the bastion VM to the Kubernetes internal network bridge vmbr1\nqm set 9001 --net1 virtio,bridge=vmbr1 --ipconfig1 ip=10.0.1.2/24,gw=10.0.1.1\n\n# Configure the bastion VM to start at boot\nqm set 9001 --onboot 1\n\n# Start the bastion VM.\nqm start 9001\n</code></pre>"},{"location":"k8s/ingress/","title":"Ingress","text":"<p>with Multiple Sub-Domains</p>"},{"location":"k8s/installation/","title":"Installation","text":""},{"location":"k8s/installation/#building-your-kubernetes-cluster","title":"Building Your Kubernetes Cluster","text":"<p>Get ready for the most exciting part\u2014creating your very own Kubernetes cluster!</p>"},{"location":"k8s/installation/#plan-overview","title":"Plan Overview","text":"<p>Here\u2019s a step-by-step breakdown of the process using Terraform and Kubespray:</p> <ul> <li>Set Up VMs: The VM's are already created with the previous step.</li> <li>Install Kubespray: Set up an additional VM and install Kubespray on it.</li> <li>Customize the Cluster:   The Kubespray configuration files to match your needs:<ul> <li><code>inventory.ini</code></li> <li><code>addons.yaml</code></li> <li><code>k8s-cluster.yaml</code></li> </ul> </li> </ul>"},{"location":"k8s/installation/#deploy-kubernetes","title":"Deploy Kubernetes","text":"<p>Use Kubespray to transform the initial VMs into fully operational Kubernetes nodes.</p> <p>Don\u2019t worry if this seems overwhelming!</p> <p>The xp-labs repository includes pre-configured Terraform files to simplify the entire process.</p> <ul> <li>Here\u2019s the simplified Steps:</li> <li>Clone the repository.</li> <li>Customize the Terraform variables for your setup.</li> <li>Run a few Terraform commands.</li> </ul> <p>Relax and enjoy your coffee while the setup completes. Ready? Let\u2019s get started!</p>"},{"location":"k8s/installation/#starting-the-deployment","title":"Starting the Deployment","text":"<p>Follow these steps to get started:</p> <ul> <li> <p>Clone the proxmox-kubernetes repository:</p> <pre><code>git clone https://github.com/surikbs-xp/xp-labs.git\n</code></pre> </li> <li> <p>Switch to the project directory:</p> <pre><code>cd proxmox\n</code></pre> </li> </ul>"},{"location":"k8s/installation/#configuring-and-deploying","title":"Configuring and Deploying","text":""},{"location":"k8s/installation/#edit-the-configuration-file","title":"Edit the Configuration File","text":"<ul> <li>Open the <code>cluster.tfvars</code> file in a text editor and update all the required variables with your own values.</li> </ul>"},{"location":"k8s/installation/#initialize-terraform","title":"Initialize Terraform","text":"<ul> <li> <p>Run the following command to initialize the Terraform working directory</p> <pre><code>terraform init\n</code></pre> </li> </ul>"},{"location":"k8s/installation/#review-the-execution-plan","title":"Review the Execution Plan","text":"<ul> <li> <p>Generate an execution plan and review it to ensure the planned changes match your expectations:</p> <pre><code>terraform plan -var-file=\"cluster.tfvars\"\n</code></pre> </li> </ul>"},{"location":"k8s/installation/#apply-the-changes","title":"Apply the Changes","text":"<ul> <li> <p>Once satisfied with the plan, execute the deployment by running:</p> <pre><code>terraform apply -var-file=\"cluster.tfvars\"\n</code></pre> </li> </ul>"},{"location":"k8s/installation/#wait-for-deployment","title":"Wait for Deployment","text":"<ul> <li>Relax and enjoy a cup of coffee while Terraform completes the deployment process.</li> </ul>"},{"location":"k8s/installation/#setting-up-ssh-configuration","title":"Setting Up SSH Configuration","text":"<ul> <li>Steps to Configure SSH:</li> <li> <p>Open the SSH Configuration File:     On your local workstation, open the <code>~/.ssh/config</code> file using your preferred text editor.</p> </li> <li> <p>Add the Bastion Host Profile:</p> <ul> <li> <p>Append the following block to define the SSH profile for your Bastion host:</p> <p><pre><code># ~/.ssh/config\nHost k8s-bastion\n  HostName 192.168.1.131\n  User ubuntu\n  Port 22\n  IdentityFile ~/proxmox-kubernetes/ssh-keys/id_rsa\n</code></pre> Replace 192.168.1.131 with the public IP address of your Bastion host.</p> </li> <li> <p>Configure Access to Kubernetes VMs:   Add another block to specify how your SSH client can connect to the Kubernetes VMs via the Bastion host:</p> <pre><code># ~/.ssh/config\nHost 10.0.1.*\n    User ubuntu\n    Port 22\n    IdentityFile ~/proxmox-kubernetes/ssh-keys/id_rsa\n    ProxyJump k8s-bastion\n</code></pre> </li> </ul> <p>Example</p> <p><code>10.0.1.*</code> matches all hosts within the <code>10.0.1.0/24</code> Kubernetes network. Adjust this pattern to match your specific network CIDR. The ProxyJump directive ensures SSH traffic is forwarded through the Bastion host to the target VMs.</p> </li> </ul>"},{"location":"k8s/installation/#verifying-the-kubernetes-cluster","title":"Verifying the Kubernetes Cluster","text":"<p>Once the deployment is complete, it\u2019s crucial to verify that all system pods in the Kubernetes cluster are running correctly.</p>"},{"location":"k8s/installation/#steps-to-verify","title":"Steps to Verify","text":"<ul> <li> <p>Open a Terminal:</p> <p>Launch a terminal on your local workstation.</p> </li> <li> <p>Find the Control Plane IP:</p> <p>Identify the IP address of a Kubernetes control plane node. This information is available in the output of the terraform apply command.</p> </li> <li> <p>Access the Control Plane:     Use <code>SSH</code> to connect to the control plane node:</p> <pre><code>ssh 10.0.1.10\n</code></pre> </li> <li> <p>Check System Pods:     On the control plane node, list all the pods in the kube-system namespace:</p> <p><pre><code>sudo kubectl get pods -n kube-system\n</code></pre> A successful cluster deployment is indicated when all system pods show a status of Running. Below is an example of the expected output:</p> <pre><code>NAME                                   READY   STATUS    RESTARTS   AGE\nkube-apiserver-node1                  1/1     Running   0          5m\nkube-controller-manager-node1         1/1     Running   0          5m\nkube-scheduler-node1                  1/1     Running   0          5m\n</code></pre> </li> </ul>"},{"location":"k8s/proxmox/","title":"Installation","text":""},{"location":"k8s/proxmox/#prerequisites","title":"Prerequisites","text":"<p>Before you start, ensure you have the following:</p> <ul> <li>A machine to run Proxmox (with at least 16GB of RAM and a multi-core processor)</li> <li>Access to the Proxmox ISO image (Proxmox Download Page)</li> <li>Basic understanding of virtualization and Kubernetes</li> <li>A stable internet connection</li> </ul>"},{"location":"k8s/proxmox/#proxmox-installation","title":"Proxmox Installation","text":""},{"location":"k8s/proxmox/#1-download-and-install-proxmox","title":"1. Download and Install Proxmox","text":"<ul> <li>Download the latest ISO from Proxmox's website.</li> <li>Follow the official guide for installation instructions.</li> </ul>"},{"location":"k8s/proxmox/#2-access-the-proxmox-web-ui","title":"2. Access the Proxmox Web UI:","text":"<ul> <li>Once installed, access the Proxmox web interface at <code>https://&lt;your-proxmox-ip&gt;:8006</code>.</li> </ul>"},{"location":"k8s/proxmox/#3-set-up-storage-for-virtual-machines","title":"3. Set up Storage for Virtual Machines:","text":"<ul> <li>Navigate to the <code>Datacenter</code> -&gt; <code>Storage</code> section to configure storage for your virtual machines.</li> </ul>"},{"location":"k8s/tools/Staytuned/","title":"Argo","text":"<p>\ud83d\udea7 This project is currently under construction. Stay tuned for updates! \ud83d\ude80</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/automation/","title":"Automation","text":""}]}